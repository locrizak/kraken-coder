// Generated by CoffeeScript 1.6.1
(function() {
  var consts, pkg, w;

  pkg = this.pkg || {};

  consts = this.consts;

  w = this;

  pkg.display.dudes.Dude = (function() {

    function Dude(world, canvas, isMe, name) {
      if (isMe == null) {
        isMe = false;
      }
      if (name == null) {
        name = "";
      }
      this.world = world;
      this.$canvas = canvas;
      this.isMe = isMe;
      this.name = name;
      this.size = 0;
      this.friction = 0;
      this.density = 0;
      this.restituation = 0;
      this.me = null;
      this.body = null;
      this.me = null;
      this.grounded = false;
      this.contactCount = 0;
      this.landed = false;
      this.prevVelocity = 0;
      this.startX = 400;
      this.startY = 500;
      this.updateTimer = null;
      this.linearVelocity = 0;
      this.display = null;
      this.bodyRef = null;
      this.rArmRef = null;
      this.lArmRef = null;
      this.headRef = null;
      this.kc = pkg.utils.KrackConverter;
      this.bf = pkg.utils.BodyFactory;
      this.kb = pkg.ui.Keyboard;
      this.kb.init();
      this._createBox2DSkeleton();
      if (this.isMe) {
        this._setupMe();
      }
    }

    Dude.prototype.update = function() {
      var force;
      force = new w.b2Vec2(0, 0);
      if (this.kb.east) {
        force.Add(new w.b2Vec2(this._getForce(true), 0));
      }
      if (this.kb.west) {
        force.Add(new w.b2Vec2(-this._getForce(true), 0));
      }
      if (this.kb.north && this._isGrounded()) {
        force.Add(new w.b2Vec2(0, -this._getForce()));
      }
      if (force.x || force.y) {
        this._applyImpulse(force, this.me.GetWorldCenter());
      }
      return this._generalUpdate();
    };

    Dude.prototype._setupMe = function() {
      var _that;
      _that = this;
      pkg.utils.Contact.registerContact("BeginContact", "ground", this.name + "_feet", function() {
        _that.landed = true;
        _that.contactCount = 1;
        return $(w).trigger("resetup");
      });
      return pkg.utils.Contact.registerContact("EndContact", "ground", this.name + "_feet", function() {
        return _that.contactCount = 0;
      });
    };

    Dude.prototype._createBox2DSkeleton = function() {
      var circle, fixList;
      fixList = null;
      this.body = new b2BodyDef;
      this.body.type = b2Body.b2_dynamicBody;
      this.body.position.Set(this.kc.getMeters(this.startX), this.kc.getMeters(this.startY));
      this.me = this.world.CreateBody(this.body);
      circle = this.bf.createCircleFixture(15, 0, 30, false, this.name + "_feet", false, 5, 0);
      this.me.CreateFixture(circle);
      this.me.CreateFixture(this.bf.createBoxFixture(15, 37, 0, 0, false, this.name));
      this.me.SetFixedRotation(true);
      this.me.userData = this.name;
      fixList = this.me.GetFixtureList();
      return fixList.SetFilterData(this._setCollisionData(fixList.GetFilterData()));
    };

    Dude.prototype._generalUpdate = function() {
      var pos, vel;
      pos = this.me.GetPosition();
      vel = this.me.GetLinearVelocity();
      if (Math.abs(vel.y) > 0 && this.kb.north) {
        if (vel.y <= 0 && this.currentFrame !== "jump") {
          this._playAnimation("jump");
        } else if (vel.y > 0 && this.currentFrame !== "fall") {
          this._playAnimation("fall");
        }
      } else {
        if (Math.abs(vel.x) < 1 && this.contactCount === 1) {
          this._playAnimation("standing");
        } else {
          this._playAnimation("walking");
        }
      }
      return this;
    };

    Dude.prototype._playAnimation = function(frame) {
      return this;
    };

    Dude.prototype._applyImpulse = function(force, center) {
      this.me.ApplyImpulse(force, center);
      return this._police();
    };

    Dude.prototype._police = function() {
      var velocity;
      velocity = this.me.GetLinearVelocity();
      if (velocity.x > consts.speed_limit) {
        return this.me.SetLinearVelocity(new b2Vec2(consts.speed_limit, velocity.y));
      } else if (velocity.x < -consts.speed_limit) {
        return this.me.SetLinearVelocity(new b2Vec2(-consts.speed_limit, velocity.y));
      }
    };

    Dude.prototype._isGrounded = function() {
      return this.contactCount === 1;
    };

    Dude.prototype._getForce = function(isX) {
      if (isX) {
        if (this._isGrounded()) {
          return consts.player_force;
        } else {
          return consts.player_force / 6;
        }
      }
      return consts.player_force * 3;
    };

    Dude.prototype._setCollisionData = function(filter) {
      filter.groupIndex = consts.playerGroupIndex;
      return filter;
    };

    return Dude;

  })();

}).call(this);
